// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBlockBins(t *testing.T) {
	t.Parallel()

	query := BlockBins()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBlockBinsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockBin{}
	if err = randomize.Struct(seed, o, blockBinDBTypes, true, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BlockBins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBlockBinsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockBin{}
	if err = randomize.Struct(seed, o, blockBinDBTypes, true, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BlockBins().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BlockBins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBlockBinsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockBin{}
	if err = randomize.Struct(seed, o, blockBinDBTypes, true, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BlockBinSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BlockBins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBlockBinsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockBin{}
	if err = randomize.Struct(seed, o, blockBinDBTypes, true, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BlockBinExists(ctx, tx, o.Height, o.Bin)
	if err != nil {
		t.Errorf("Unable to check if BlockBin exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BlockBinExists to return true, but got false.")
	}
}

func testBlockBinsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockBin{}
	if err = randomize.Struct(seed, o, blockBinDBTypes, true, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	blockBinFound, err := FindBlockBin(ctx, tx, o.Height, o.Bin)
	if err != nil {
		t.Error(err)
	}

	if blockBinFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBlockBinsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockBin{}
	if err = randomize.Struct(seed, o, blockBinDBTypes, true, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BlockBins().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBlockBinsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockBin{}
	if err = randomize.Struct(seed, o, blockBinDBTypes, true, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BlockBins().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBlockBinsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blockBinOne := &BlockBin{}
	blockBinTwo := &BlockBin{}
	if err = randomize.Struct(seed, blockBinOne, blockBinDBTypes, false, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}
	if err = randomize.Struct(seed, blockBinTwo, blockBinDBTypes, false, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = blockBinOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = blockBinTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BlockBins().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBlockBinsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	blockBinOne := &BlockBin{}
	blockBinTwo := &BlockBin{}
	if err = randomize.Struct(seed, blockBinOne, blockBinDBTypes, false, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}
	if err = randomize.Struct(seed, blockBinTwo, blockBinDBTypes, false, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = blockBinOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = blockBinTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BlockBins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testBlockBinsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockBin{}
	if err = randomize.Struct(seed, o, blockBinDBTypes, true, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BlockBins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBlockBinsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockBin{}
	if err = randomize.Struct(seed, o, blockBinDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(blockBinColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BlockBins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBlockBinsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockBin{}
	if err = randomize.Struct(seed, o, blockBinDBTypes, true, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBlockBinsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockBin{}
	if err = randomize.Struct(seed, o, blockBinDBTypes, true, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BlockBinSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBlockBinsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockBin{}
	if err = randomize.Struct(seed, o, blockBinDBTypes, true, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BlockBins().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	blockBinDBTypes = map[string]string{`Height`: `bigint`, `ReceiveTimeDiff`: `double precision`, `InternalTimestamp`: `bigint`, `Bin`: `character varying`}
	_               = bytes.MinRead
)

func testBlockBinsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(blockBinPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(blockBinAllColumns) == len(blockBinPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BlockBin{}
	if err = randomize.Struct(seed, o, blockBinDBTypes, true, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BlockBins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, blockBinDBTypes, true, blockBinPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBlockBinsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(blockBinAllColumns) == len(blockBinPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BlockBin{}
	if err = randomize.Struct(seed, o, blockBinDBTypes, true, blockBinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BlockBins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, blockBinDBTypes, true, blockBinPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(blockBinAllColumns, blockBinPrimaryKeyColumns) {
		fields = blockBinAllColumns
	} else {
		fields = strmangle.SetComplement(
			blockBinAllColumns,
			blockBinPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BlockBinSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBlockBinsUpsert(t *testing.T) {
	t.Parallel()

	if len(blockBinAllColumns) == len(blockBinPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BlockBin{}
	if err = randomize.Struct(seed, &o, blockBinDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BlockBin: %s", err)
	}

	count, err := BlockBins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, blockBinDBTypes, false, blockBinPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BlockBin struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BlockBin: %s", err)
	}

	count, err = BlockBins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
