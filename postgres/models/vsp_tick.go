// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// VSPTick is an object representing the database table.
type VSPTick struct {
	ID               int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	VSPID            int       `boil:"vsp_id" json:"vsp_id" toml:"vsp_id" yaml:"vsp_id"`
	Immature         int       `boil:"immature" json:"immature" toml:"immature" yaml:"immature"`
	Live             int       `boil:"live" json:"live" toml:"live" yaml:"live"`
	Voted            int       `boil:"voted" json:"voted" toml:"voted" yaml:"voted"`
	Missed           int       `boil:"missed" json:"missed" toml:"missed" yaml:"missed"`
	PoolFees         float64   `boil:"pool_fees" json:"pool_fees" toml:"pool_fees" yaml:"pool_fees"`
	ProportionLive   float64   `boil:"proportion_live" json:"proportion_live" toml:"proportion_live" yaml:"proportion_live"`
	ProportionMissed float64   `boil:"proportion_missed" json:"proportion_missed" toml:"proportion_missed" yaml:"proportion_missed"`
	UserCount        int       `boil:"user_count" json:"user_count" toml:"user_count" yaml:"user_count"`
	UsersActive      int       `boil:"users_active" json:"users_active" toml:"users_active" yaml:"users_active"`
	Time             time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`

	R *vspTickR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vspTickL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VSPTickColumns = struct {
	ID               string
	VSPID            string
	Immature         string
	Live             string
	Voted            string
	Missed           string
	PoolFees         string
	ProportionLive   string
	ProportionMissed string
	UserCount        string
	UsersActive      string
	Time             string
}{
	ID:               "id",
	VSPID:            "vsp_id",
	Immature:         "immature",
	Live:             "live",
	Voted:            "voted",
	Missed:           "missed",
	PoolFees:         "pool_fees",
	ProportionLive:   "proportion_live",
	ProportionMissed: "proportion_missed",
	UserCount:        "user_count",
	UsersActive:      "users_active",
	Time:             "time",
}

// Generated where

var VSPTickWhere = struct {
	ID               whereHelperint
	VSPID            whereHelperint
	Immature         whereHelperint
	Live             whereHelperint
	Voted            whereHelperint
	Missed           whereHelperint
	PoolFees         whereHelperfloat64
	ProportionLive   whereHelperfloat64
	ProportionMissed whereHelperfloat64
	UserCount        whereHelperint
	UsersActive      whereHelperint
	Time             whereHelpertime_Time
}{
	ID:               whereHelperint{field: "\"vsp_tick\".\"id\""},
	VSPID:            whereHelperint{field: "\"vsp_tick\".\"vsp_id\""},
	Immature:         whereHelperint{field: "\"vsp_tick\".\"immature\""},
	Live:             whereHelperint{field: "\"vsp_tick\".\"live\""},
	Voted:            whereHelperint{field: "\"vsp_tick\".\"voted\""},
	Missed:           whereHelperint{field: "\"vsp_tick\".\"missed\""},
	PoolFees:         whereHelperfloat64{field: "\"vsp_tick\".\"pool_fees\""},
	ProportionLive:   whereHelperfloat64{field: "\"vsp_tick\".\"proportion_live\""},
	ProportionMissed: whereHelperfloat64{field: "\"vsp_tick\".\"proportion_missed\""},
	UserCount:        whereHelperint{field: "\"vsp_tick\".\"user_count\""},
	UsersActive:      whereHelperint{field: "\"vsp_tick\".\"users_active\""},
	Time:             whereHelpertime_Time{field: "\"vsp_tick\".\"time\""},
}

// VSPTickRels is where relationship names are stored.
var VSPTickRels = struct {
	VSP string
}{
	VSP: "VSP",
}

// vspTickR is where relationships are stored.
type vspTickR struct {
	VSP *VSP
}

// NewStruct creates a new relationship struct
func (*vspTickR) NewStruct() *vspTickR {
	return &vspTickR{}
}

// vspTickL is where Load methods for each relationship are stored.
type vspTickL struct{}

var (
	vspTickAllColumns            = []string{"id", "vsp_id", "immature", "live", "voted", "missed", "pool_fees", "proportion_live", "proportion_missed", "user_count", "users_active", "time"}
	vspTickColumnsWithoutDefault = []string{"vsp_id", "immature", "live", "voted", "missed", "pool_fees", "proportion_live", "proportion_missed", "user_count", "users_active", "time"}
	vspTickColumnsWithDefault    = []string{"id"}
	vspTickPrimaryKeyColumns     = []string{"id"}
)

type (
	// VSPTickSlice is an alias for a slice of pointers to VSPTick.
	// This should generally be used opposed to []VSPTick.
	VSPTickSlice []*VSPTick

	vspTickQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vspTickType                 = reflect.TypeOf(&VSPTick{})
	vspTickMapping              = queries.MakeStructMapping(vspTickType)
	vspTickPrimaryKeyMapping, _ = queries.BindMapping(vspTickType, vspTickMapping, vspTickPrimaryKeyColumns)
	vspTickInsertCacheMut       sync.RWMutex
	vspTickInsertCache          = make(map[string]insertCache)
	vspTickUpdateCacheMut       sync.RWMutex
	vspTickUpdateCache          = make(map[string]updateCache)
	vspTickUpsertCacheMut       sync.RWMutex
	vspTickUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single vspTick record from the query.
func (q vspTickQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VSPTick, error) {
	o := &VSPTick{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vsp_tick")
	}

	return o, nil
}

// All returns all VSPTick records from the query.
func (q vspTickQuery) All(ctx context.Context, exec boil.ContextExecutor) (VSPTickSlice, error) {
	var o []*VSPTick

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VSPTick slice")
	}

	return o, nil
}

// Count returns the count of all VSPTick records in the query.
func (q vspTickQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vsp_tick rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vspTickQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vsp_tick exists")
	}

	return count > 0, nil
}

// VSP pointed to by the foreign key.
func (o *VSPTick) VSP(mods ...qm.QueryMod) vspQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VSPID),
	}

	queryMods = append(queryMods, mods...)

	query := VSPS(queryMods...)
	queries.SetFrom(query.Query, "\"vsp\"")

	return query
}

// LoadVSP allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vspTickL) LoadVSP(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVSPTick interface{}, mods queries.Applicator) error {
	var slice []*VSPTick
	var object *VSPTick

	if singular {
		object = maybeVSPTick.(*VSPTick)
	} else {
		slice = *maybeVSPTick.(*[]*VSPTick)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vspTickR{}
		}
		args = append(args, object.VSPID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vspTickR{}
			}

			for _, a := range args {
				if a == obj.VSPID {
					continue Outer
				}
			}

			args = append(args, obj.VSPID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`vsp`), qm.WhereIn(`vsp.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VSP")
	}

	var resultSlice []*VSP
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VSP")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vsp")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vsp")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VSP = foreign
		if foreign.R == nil {
			foreign.R = &vspR{}
		}
		foreign.R.VSPTicks = append(foreign.R.VSPTicks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VSPID == foreign.ID {
				local.R.VSP = foreign
				if foreign.R == nil {
					foreign.R = &vspR{}
				}
				foreign.R.VSPTicks = append(foreign.R.VSPTicks, local)
				break
			}
		}
	}

	return nil
}

// SetVSP of the vspTick to the related item.
// Sets o.R.VSP to related.
// Adds o to related.R.VSPTicks.
func (o *VSPTick) SetVSP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VSP) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vsp_tick\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vsp_id"}),
		strmangle.WhereClause("\"", "\"", 2, vspTickPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VSPID = related.ID
	if o.R == nil {
		o.R = &vspTickR{
			VSP: related,
		}
	} else {
		o.R.VSP = related
	}

	if related.R == nil {
		related.R = &vspR{
			VSPTicks: VSPTickSlice{o},
		}
	} else {
		related.R.VSPTicks = append(related.R.VSPTicks, o)
	}

	return nil
}

// VSPTicks retrieves all the records using an executor.
func VSPTicks(mods ...qm.QueryMod) vspTickQuery {
	mods = append(mods, qm.From("\"vsp_tick\""))
	return vspTickQuery{NewQuery(mods...)}
}

// FindVSPTick retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVSPTick(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*VSPTick, error) {
	vspTickObj := &VSPTick{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vsp_tick\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, vspTickObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vsp_tick")
	}

	return vspTickObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VSPTick) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vsp_tick provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(vspTickColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vspTickInsertCacheMut.RLock()
	cache, cached := vspTickInsertCache[key]
	vspTickInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vspTickAllColumns,
			vspTickColumnsWithDefault,
			vspTickColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vspTickType, vspTickMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vspTickType, vspTickMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vsp_tick\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vsp_tick\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vsp_tick")
	}

	if !cached {
		vspTickInsertCacheMut.Lock()
		vspTickInsertCache[key] = cache
		vspTickInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the VSPTick.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VSPTick) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	vspTickUpdateCacheMut.RLock()
	cache, cached := vspTickUpdateCache[key]
	vspTickUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vspTickAllColumns,
			vspTickPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vsp_tick, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vsp_tick\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vspTickPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vspTickType, vspTickMapping, append(wl, vspTickPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vsp_tick row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vsp_tick")
	}

	if !cached {
		vspTickUpdateCacheMut.Lock()
		vspTickUpdateCache[key] = cache
		vspTickUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q vspTickQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vsp_tick")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vsp_tick")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VSPTickSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vspTickPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vsp_tick\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vspTickPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vspTick slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vspTick")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VSPTick) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vsp_tick provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(vspTickColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vspTickUpsertCacheMut.RLock()
	cache, cached := vspTickUpsertCache[key]
	vspTickUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			vspTickAllColumns,
			vspTickColumnsWithDefault,
			vspTickColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			vspTickAllColumns,
			vspTickPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vsp_tick, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(vspTickPrimaryKeyColumns))
			copy(conflict, vspTickPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vsp_tick\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(vspTickType, vspTickMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vspTickType, vspTickMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vsp_tick")
	}

	if !cached {
		vspTickUpsertCacheMut.Lock()
		vspTickUpsertCache[key] = cache
		vspTickUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single VSPTick record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VSPTick) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VSPTick provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vspTickPrimaryKeyMapping)
	sql := "DELETE FROM \"vsp_tick\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vsp_tick")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vsp_tick")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vspTickQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vspTickQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vsp_tick")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vsp_tick")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VSPTickSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vspTickPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vsp_tick\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vspTickPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vspTick slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vsp_tick")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VSPTick) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVSPTick(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VSPTickSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VSPTickSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vspTickPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vsp_tick\".* FROM \"vsp_tick\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vspTickPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VSPTickSlice")
	}

	*o = slice

	return nil
}

// VSPTickExists checks if the VSPTick row exists.
func VSPTickExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vsp_tick\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vsp_tick exists")
	}

	return exists, nil
}
