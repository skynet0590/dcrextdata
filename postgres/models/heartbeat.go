// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Heartbeat is an object representing the database table.
type Heartbeat struct {
	Timestamp     int64  `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	NodeID        string `boil:"node_id" json:"node_id" toml:"node_id" yaml:"node_id"`
	LastSeen      int64  `boil:"last_seen" json:"last_seen" toml:"last_seen" yaml:"last_seen"`
	Latency       int    `boil:"latency" json:"latency" toml:"latency" yaml:"latency"`
	CurrentHeight int64  `boil:"current_height" json:"current_height" toml:"current_height" yaml:"current_height"`

	R *heartbeatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L heartbeatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HeartbeatColumns = struct {
	Timestamp     string
	NodeID        string
	LastSeen      string
	Latency       string
	CurrentHeight string
}{
	Timestamp:     "timestamp",
	NodeID:        "node_id",
	LastSeen:      "last_seen",
	Latency:       "latency",
	CurrentHeight: "current_height",
}

// Generated where

var HeartbeatWhere = struct {
	Timestamp     whereHelperint64
	NodeID        whereHelperstring
	LastSeen      whereHelperint64
	Latency       whereHelperint
	CurrentHeight whereHelperint64
}{
	Timestamp:     whereHelperint64{field: "\"heartbeat\".\"timestamp\""},
	NodeID:        whereHelperstring{field: "\"heartbeat\".\"node_id\""},
	LastSeen:      whereHelperint64{field: "\"heartbeat\".\"last_seen\""},
	Latency:       whereHelperint{field: "\"heartbeat\".\"latency\""},
	CurrentHeight: whereHelperint64{field: "\"heartbeat\".\"current_height\""},
}

// HeartbeatRels is where relationship names are stored.
var HeartbeatRels = struct {
	Node string
}{
	Node: "Node",
}

// heartbeatR is where relationships are stored.
type heartbeatR struct {
	Node *Node
}

// NewStruct creates a new relationship struct
func (*heartbeatR) NewStruct() *heartbeatR {
	return &heartbeatR{}
}

// heartbeatL is where Load methods for each relationship are stored.
type heartbeatL struct{}

var (
	heartbeatAllColumns            = []string{"timestamp", "node_id", "last_seen", "latency", "current_height"}
	heartbeatColumnsWithoutDefault = []string{"timestamp", "node_id", "last_seen", "latency", "current_height"}
	heartbeatColumnsWithDefault    = []string{}
	heartbeatPrimaryKeyColumns     = []string{"timestamp", "node_id"}
)

type (
	// HeartbeatSlice is an alias for a slice of pointers to Heartbeat.
	// This should generally be used opposed to []Heartbeat.
	HeartbeatSlice []*Heartbeat

	heartbeatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	heartbeatType                 = reflect.TypeOf(&Heartbeat{})
	heartbeatMapping              = queries.MakeStructMapping(heartbeatType)
	heartbeatPrimaryKeyMapping, _ = queries.BindMapping(heartbeatType, heartbeatMapping, heartbeatPrimaryKeyColumns)
	heartbeatInsertCacheMut       sync.RWMutex
	heartbeatInsertCache          = make(map[string]insertCache)
	heartbeatUpdateCacheMut       sync.RWMutex
	heartbeatUpdateCache          = make(map[string]updateCache)
	heartbeatUpsertCacheMut       sync.RWMutex
	heartbeatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single heartbeat record from the query.
func (q heartbeatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Heartbeat, error) {
	o := &Heartbeat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for heartbeat")
	}

	return o, nil
}

// All returns all Heartbeat records from the query.
func (q heartbeatQuery) All(ctx context.Context, exec boil.ContextExecutor) (HeartbeatSlice, error) {
	var o []*Heartbeat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Heartbeat slice")
	}

	return o, nil
}

// Count returns the count of all Heartbeat records in the query.
func (q heartbeatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count heartbeat rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q heartbeatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if heartbeat exists")
	}

	return count > 0, nil
}

// Node pointed to by the foreign key.
func (o *Heartbeat) Node(mods ...qm.QueryMod) nodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"address\" = ?", o.NodeID),
	}

	queryMods = append(queryMods, mods...)

	query := Nodes(queryMods...)
	queries.SetFrom(query.Query, "\"node\"")

	return query
}

// LoadNode allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (heartbeatL) LoadNode(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHeartbeat interface{}, mods queries.Applicator) error {
	var slice []*Heartbeat
	var object *Heartbeat

	if singular {
		object = maybeHeartbeat.(*Heartbeat)
	} else {
		slice = *maybeHeartbeat.(*[]*Heartbeat)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &heartbeatR{}
		}
		args = append(args, object.NodeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &heartbeatR{}
			}

			for _, a := range args {
				if a == obj.NodeID {
					continue Outer
				}
			}

			args = append(args, obj.NodeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`node`), qm.WhereIn(`node.address in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Node")
	}

	var resultSlice []*Node
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Node")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for node")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for node")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Node = foreign
		if foreign.R == nil {
			foreign.R = &nodeR{}
		}
		foreign.R.Heartbeats = append(foreign.R.Heartbeats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NodeID == foreign.Address {
				local.R.Node = foreign
				if foreign.R == nil {
					foreign.R = &nodeR{}
				}
				foreign.R.Heartbeats = append(foreign.R.Heartbeats, local)
				break
			}
		}
	}

	return nil
}

// SetNode of the heartbeat to the related item.
// Sets o.R.Node to related.
// Adds o to related.R.Heartbeats.
func (o *Heartbeat) SetNode(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Node) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"heartbeat\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"node_id"}),
		strmangle.WhereClause("\"", "\"", 2, heartbeatPrimaryKeyColumns),
	)
	values := []interface{}{related.Address, o.Timestamp, o.NodeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NodeID = related.Address
	if o.R == nil {
		o.R = &heartbeatR{
			Node: related,
		}
	} else {
		o.R.Node = related
	}

	if related.R == nil {
		related.R = &nodeR{
			Heartbeats: HeartbeatSlice{o},
		}
	} else {
		related.R.Heartbeats = append(related.R.Heartbeats, o)
	}

	return nil
}

// Heartbeats retrieves all the records using an executor.
func Heartbeats(mods ...qm.QueryMod) heartbeatQuery {
	mods = append(mods, qm.From("\"heartbeat\""))
	return heartbeatQuery{NewQuery(mods...)}
}

// FindHeartbeat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHeartbeat(ctx context.Context, exec boil.ContextExecutor, timestamp int64, nodeID string, selectCols ...string) (*Heartbeat, error) {
	heartbeatObj := &Heartbeat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"heartbeat\" where \"timestamp\"=$1 AND \"node_id\"=$2", sel,
	)

	q := queries.Raw(query, timestamp, nodeID)

	err := q.Bind(ctx, exec, heartbeatObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from heartbeat")
	}

	return heartbeatObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Heartbeat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no heartbeat provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(heartbeatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	heartbeatInsertCacheMut.RLock()
	cache, cached := heartbeatInsertCache[key]
	heartbeatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			heartbeatAllColumns,
			heartbeatColumnsWithDefault,
			heartbeatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(heartbeatType, heartbeatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(heartbeatType, heartbeatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"heartbeat\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"heartbeat\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into heartbeat")
	}

	if !cached {
		heartbeatInsertCacheMut.Lock()
		heartbeatInsertCache[key] = cache
		heartbeatInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Heartbeat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Heartbeat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	heartbeatUpdateCacheMut.RLock()
	cache, cached := heartbeatUpdateCache[key]
	heartbeatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			heartbeatAllColumns,
			heartbeatPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update heartbeat, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"heartbeat\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, heartbeatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(heartbeatType, heartbeatMapping, append(wl, heartbeatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update heartbeat row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for heartbeat")
	}

	if !cached {
		heartbeatUpdateCacheMut.Lock()
		heartbeatUpdateCache[key] = cache
		heartbeatUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q heartbeatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for heartbeat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for heartbeat")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HeartbeatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), heartbeatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"heartbeat\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, heartbeatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in heartbeat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all heartbeat")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Heartbeat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no heartbeat provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(heartbeatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	heartbeatUpsertCacheMut.RLock()
	cache, cached := heartbeatUpsertCache[key]
	heartbeatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			heartbeatAllColumns,
			heartbeatColumnsWithDefault,
			heartbeatColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			heartbeatAllColumns,
			heartbeatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert heartbeat, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(heartbeatPrimaryKeyColumns))
			copy(conflict, heartbeatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"heartbeat\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(heartbeatType, heartbeatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(heartbeatType, heartbeatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert heartbeat")
	}

	if !cached {
		heartbeatUpsertCacheMut.Lock()
		heartbeatUpsertCache[key] = cache
		heartbeatUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Heartbeat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Heartbeat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Heartbeat provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), heartbeatPrimaryKeyMapping)
	sql := "DELETE FROM \"heartbeat\" WHERE \"timestamp\"=$1 AND \"node_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from heartbeat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for heartbeat")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q heartbeatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no heartbeatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from heartbeat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for heartbeat")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HeartbeatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), heartbeatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"heartbeat\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, heartbeatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from heartbeat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for heartbeat")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Heartbeat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHeartbeat(ctx, exec, o.Timestamp, o.NodeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HeartbeatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HeartbeatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), heartbeatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"heartbeat\".* FROM \"heartbeat\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, heartbeatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HeartbeatSlice")
	}

	*o = slice

	return nil
}

// HeartbeatExists checks if the Heartbeat row exists.
func HeartbeatExists(ctx context.Context, exec boil.ContextExecutor, timestamp int64, nodeID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"heartbeat\" where \"timestamp\"=$1 AND \"node_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, timestamp, nodeID)
	}
	row := exec.QueryRowContext(ctx, sql, timestamp, nodeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if heartbeat exists")
	}

	return exists, nil
}
