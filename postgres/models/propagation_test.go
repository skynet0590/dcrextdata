// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPropagations(t *testing.T) {
	t.Parallel()

	query := Propagations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPropagationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Propagation{}
	if err = randomize.Struct(seed, o, propagationDBTypes, true, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Propagations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPropagationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Propagation{}
	if err = randomize.Struct(seed, o, propagationDBTypes, true, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Propagations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Propagations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPropagationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Propagation{}
	if err = randomize.Struct(seed, o, propagationDBTypes, true, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PropagationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Propagations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPropagationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Propagation{}
	if err = randomize.Struct(seed, o, propagationDBTypes, true, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PropagationExists(ctx, tx, o.Height, o.Source, o.Bin)
	if err != nil {
		t.Errorf("Unable to check if Propagation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PropagationExists to return true, but got false.")
	}
}

func testPropagationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Propagation{}
	if err = randomize.Struct(seed, o, propagationDBTypes, true, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	propagationFound, err := FindPropagation(ctx, tx, o.Height, o.Source, o.Bin)
	if err != nil {
		t.Error(err)
	}

	if propagationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPropagationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Propagation{}
	if err = randomize.Struct(seed, o, propagationDBTypes, true, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Propagations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPropagationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Propagation{}
	if err = randomize.Struct(seed, o, propagationDBTypes, true, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Propagations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPropagationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	propagationOne := &Propagation{}
	propagationTwo := &Propagation{}
	if err = randomize.Struct(seed, propagationOne, propagationDBTypes, false, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}
	if err = randomize.Struct(seed, propagationTwo, propagationDBTypes, false, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = propagationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = propagationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Propagations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPropagationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	propagationOne := &Propagation{}
	propagationTwo := &Propagation{}
	if err = randomize.Struct(seed, propagationOne, propagationDBTypes, false, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}
	if err = randomize.Struct(seed, propagationTwo, propagationDBTypes, false, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = propagationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = propagationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Propagations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPropagationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Propagation{}
	if err = randomize.Struct(seed, o, propagationDBTypes, true, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Propagations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPropagationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Propagation{}
	if err = randomize.Struct(seed, o, propagationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(propagationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Propagations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPropagationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Propagation{}
	if err = randomize.Struct(seed, o, propagationDBTypes, true, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPropagationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Propagation{}
	if err = randomize.Struct(seed, o, propagationDBTypes, true, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PropagationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPropagationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Propagation{}
	if err = randomize.Struct(seed, o, propagationDBTypes, true, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Propagations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	propagationDBTypes = map[string]string{`Height`: `bigint`, `Time`: `bigint`, `Bin`: `character varying`, `Source`: `character varying`, `Deviation`: `double precision`}
	_                  = bytes.MinRead
)

func testPropagationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(propagationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(propagationAllColumns) == len(propagationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Propagation{}
	if err = randomize.Struct(seed, o, propagationDBTypes, true, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Propagations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, propagationDBTypes, true, propagationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPropagationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(propagationAllColumns) == len(propagationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Propagation{}
	if err = randomize.Struct(seed, o, propagationDBTypes, true, propagationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Propagations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, propagationDBTypes, true, propagationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(propagationAllColumns, propagationPrimaryKeyColumns) {
		fields = propagationAllColumns
	} else {
		fields = strmangle.SetComplement(
			propagationAllColumns,
			propagationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PropagationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPropagationsUpsert(t *testing.T) {
	t.Parallel()

	if len(propagationAllColumns) == len(propagationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Propagation{}
	if err = randomize.Struct(seed, &o, propagationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Propagation: %s", err)
	}

	count, err := Propagations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, propagationDBTypes, false, propagationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Propagation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Propagation: %s", err)
	}

	count, err = Propagations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
