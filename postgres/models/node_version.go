// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// NodeVersion is an object representing the database table.
type NodeVersion struct {
	Timestamp int64  `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	Height    int64  `boil:"height" json:"height" toml:"height" yaml:"height"`
	NodeCount int    `boil:"node_count" json:"node_count" toml:"node_count" yaml:"node_count"`
	UserAgent string `boil:"user_agent" json:"user_agent" toml:"user_agent" yaml:"user_agent"`
	Bin       string `boil:"bin" json:"bin" toml:"bin" yaml:"bin"`

	R *nodeVersionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nodeVersionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NodeVersionColumns = struct {
	Timestamp string
	Height    string
	NodeCount string
	UserAgent string
	Bin       string
}{
	Timestamp: "timestamp",
	Height:    "height",
	NodeCount: "node_count",
	UserAgent: "user_agent",
	Bin:       "bin",
}

// Generated where

var NodeVersionWhere = struct {
	Timestamp whereHelperint64
	Height    whereHelperint64
	NodeCount whereHelperint
	UserAgent whereHelperstring
	Bin       whereHelperstring
}{
	Timestamp: whereHelperint64{field: "\"node_version\".\"timestamp\""},
	Height:    whereHelperint64{field: "\"node_version\".\"height\""},
	NodeCount: whereHelperint{field: "\"node_version\".\"node_count\""},
	UserAgent: whereHelperstring{field: "\"node_version\".\"user_agent\""},
	Bin:       whereHelperstring{field: "\"node_version\".\"bin\""},
}

// NodeVersionRels is where relationship names are stored.
var NodeVersionRels = struct {
}{}

// nodeVersionR is where relationships are stored.
type nodeVersionR struct {
}

// NewStruct creates a new relationship struct
func (*nodeVersionR) NewStruct() *nodeVersionR {
	return &nodeVersionR{}
}

// nodeVersionL is where Load methods for each relationship are stored.
type nodeVersionL struct{}

var (
	nodeVersionAllColumns            = []string{"timestamp", "height", "node_count", "user_agent", "bin"}
	nodeVersionColumnsWithoutDefault = []string{"timestamp", "height", "node_count", "user_agent"}
	nodeVersionColumnsWithDefault    = []string{"bin"}
	nodeVersionPrimaryKeyColumns     = []string{"timestamp", "bin", "user_agent"}
)

type (
	// NodeVersionSlice is an alias for a slice of pointers to NodeVersion.
	// This should generally be used opposed to []NodeVersion.
	NodeVersionSlice []*NodeVersion

	nodeVersionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nodeVersionType                 = reflect.TypeOf(&NodeVersion{})
	nodeVersionMapping              = queries.MakeStructMapping(nodeVersionType)
	nodeVersionPrimaryKeyMapping, _ = queries.BindMapping(nodeVersionType, nodeVersionMapping, nodeVersionPrimaryKeyColumns)
	nodeVersionInsertCacheMut       sync.RWMutex
	nodeVersionInsertCache          = make(map[string]insertCache)
	nodeVersionUpdateCacheMut       sync.RWMutex
	nodeVersionUpdateCache          = make(map[string]updateCache)
	nodeVersionUpsertCacheMut       sync.RWMutex
	nodeVersionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single nodeVersion record from the query.
func (q nodeVersionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NodeVersion, error) {
	o := &NodeVersion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for node_version")
	}

	return o, nil
}

// All returns all NodeVersion records from the query.
func (q nodeVersionQuery) All(ctx context.Context, exec boil.ContextExecutor) (NodeVersionSlice, error) {
	var o []*NodeVersion

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NodeVersion slice")
	}

	return o, nil
}

// Count returns the count of all NodeVersion records in the query.
func (q nodeVersionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count node_version rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nodeVersionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if node_version exists")
	}

	return count > 0, nil
}

// NodeVersions retrieves all the records using an executor.
func NodeVersions(mods ...qm.QueryMod) nodeVersionQuery {
	mods = append(mods, qm.From("\"node_version\""))
	return nodeVersionQuery{NewQuery(mods...)}
}

// FindNodeVersion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNodeVersion(ctx context.Context, exec boil.ContextExecutor, timestamp int64, bin string, userAgent string, selectCols ...string) (*NodeVersion, error) {
	nodeVersionObj := &NodeVersion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"node_version\" where \"timestamp\"=$1 AND \"bin\"=$2 AND \"user_agent\"=$3", sel,
	)

	q := queries.Raw(query, timestamp, bin, userAgent)

	err := q.Bind(ctx, exec, nodeVersionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from node_version")
	}

	return nodeVersionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NodeVersion) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no node_version provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(nodeVersionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nodeVersionInsertCacheMut.RLock()
	cache, cached := nodeVersionInsertCache[key]
	nodeVersionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nodeVersionAllColumns,
			nodeVersionColumnsWithDefault,
			nodeVersionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nodeVersionType, nodeVersionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nodeVersionType, nodeVersionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"node_version\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"node_version\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into node_version")
	}

	if !cached {
		nodeVersionInsertCacheMut.Lock()
		nodeVersionInsertCache[key] = cache
		nodeVersionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the NodeVersion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NodeVersion) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	nodeVersionUpdateCacheMut.RLock()
	cache, cached := nodeVersionUpdateCache[key]
	nodeVersionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nodeVersionAllColumns,
			nodeVersionPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update node_version, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"node_version\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, nodeVersionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nodeVersionType, nodeVersionMapping, append(wl, nodeVersionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update node_version row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for node_version")
	}

	if !cached {
		nodeVersionUpdateCacheMut.Lock()
		nodeVersionUpdateCache[key] = cache
		nodeVersionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q nodeVersionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for node_version")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for node_version")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NodeVersionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodeVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"node_version\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, nodeVersionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in nodeVersion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all nodeVersion")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NodeVersion) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no node_version provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(nodeVersionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	nodeVersionUpsertCacheMut.RLock()
	cache, cached := nodeVersionUpsertCache[key]
	nodeVersionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			nodeVersionAllColumns,
			nodeVersionColumnsWithDefault,
			nodeVersionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			nodeVersionAllColumns,
			nodeVersionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert node_version, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(nodeVersionPrimaryKeyColumns))
			copy(conflict, nodeVersionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"node_version\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(nodeVersionType, nodeVersionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(nodeVersionType, nodeVersionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert node_version")
	}

	if !cached {
		nodeVersionUpsertCacheMut.Lock()
		nodeVersionUpsertCache[key] = cache
		nodeVersionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single NodeVersion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NodeVersion) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NodeVersion provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nodeVersionPrimaryKeyMapping)
	sql := "DELETE FROM \"node_version\" WHERE \"timestamp\"=$1 AND \"bin\"=$2 AND \"user_agent\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from node_version")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for node_version")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nodeVersionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nodeVersionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from node_version")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for node_version")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NodeVersionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodeVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"node_version\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nodeVersionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nodeVersion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for node_version")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NodeVersion) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNodeVersion(ctx, exec, o.Timestamp, o.Bin, o.UserAgent)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NodeVersionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NodeVersionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nodeVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"node_version\".* FROM \"node_version\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nodeVersionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NodeVersionSlice")
	}

	*o = slice

	return nil
}

// NodeVersionExists checks if the NodeVersion row exists.
func NodeVersionExists(ctx context.Context, exec boil.ContextExecutor, timestamp int64, bin string, userAgent string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"node_version\" where \"timestamp\"=$1 AND \"bin\"=$2 AND \"user_agent\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, timestamp, bin, userAgent)
	}
	row := exec.QueryRowContext(ctx, sql, timestamp, bin, userAgent)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if node_version exists")
	}

	return exists, nil
}
