// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// VSPTickBin is an object representing the database table.
type VSPTickBin struct {
	VSPID            int          `boil:"vsp_id" json:"vsp_id" toml:"vsp_id" yaml:"vsp_id"`
	Bin              string       `boil:"bin" json:"bin" toml:"bin" yaml:"bin"`
	Immature         null.Int     `boil:"immature" json:"immature,omitempty" toml:"immature" yaml:"immature,omitempty"`
	Live             null.Int     `boil:"live" json:"live,omitempty" toml:"live" yaml:"live,omitempty"`
	Voted            null.Int     `boil:"voted" json:"voted,omitempty" toml:"voted" yaml:"voted,omitempty"`
	Missed           null.Int     `boil:"missed" json:"missed,omitempty" toml:"missed" yaml:"missed,omitempty"`
	PoolFees         null.Float64 `boil:"pool_fees" json:"pool_fees,omitempty" toml:"pool_fees" yaml:"pool_fees,omitempty"`
	ProportionLive   null.Float64 `boil:"proportion_live" json:"proportion_live,omitempty" toml:"proportion_live" yaml:"proportion_live,omitempty"`
	ProportionMissed null.Float64 `boil:"proportion_missed" json:"proportion_missed,omitempty" toml:"proportion_missed" yaml:"proportion_missed,omitempty"`
	UserCount        null.Int     `boil:"user_count" json:"user_count,omitempty" toml:"user_count" yaml:"user_count,omitempty"`
	UsersActive      null.Int     `boil:"users_active" json:"users_active,omitempty" toml:"users_active" yaml:"users_active,omitempty"`
	Time             int64        `boil:"time" json:"time" toml:"time" yaml:"time"`

	R *vspTickBinR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vspTickBinL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VSPTickBinColumns = struct {
	VSPID            string
	Bin              string
	Immature         string
	Live             string
	Voted            string
	Missed           string
	PoolFees         string
	ProportionLive   string
	ProportionMissed string
	UserCount        string
	UsersActive      string
	Time             string
}{
	VSPID:            "vsp_id",
	Bin:              "bin",
	Immature:         "immature",
	Live:             "live",
	Voted:            "voted",
	Missed:           "missed",
	PoolFees:         "pool_fees",
	ProportionLive:   "proportion_live",
	ProportionMissed: "proportion_missed",
	UserCount:        "user_count",
	UsersActive:      "users_active",
	Time:             "time",
}

// Generated where

var VSPTickBinWhere = struct {
	VSPID            whereHelperint
	Bin              whereHelperstring
	Immature         whereHelpernull_Int
	Live             whereHelpernull_Int
	Voted            whereHelpernull_Int
	Missed           whereHelpernull_Int
	PoolFees         whereHelpernull_Float64
	ProportionLive   whereHelpernull_Float64
	ProportionMissed whereHelpernull_Float64
	UserCount        whereHelpernull_Int
	UsersActive      whereHelpernull_Int
	Time             whereHelperint64
}{
	VSPID:            whereHelperint{field: "\"vsp_tick_bin\".\"vsp_id\""},
	Bin:              whereHelperstring{field: "\"vsp_tick_bin\".\"bin\""},
	Immature:         whereHelpernull_Int{field: "\"vsp_tick_bin\".\"immature\""},
	Live:             whereHelpernull_Int{field: "\"vsp_tick_bin\".\"live\""},
	Voted:            whereHelpernull_Int{field: "\"vsp_tick_bin\".\"voted\""},
	Missed:           whereHelpernull_Int{field: "\"vsp_tick_bin\".\"missed\""},
	PoolFees:         whereHelpernull_Float64{field: "\"vsp_tick_bin\".\"pool_fees\""},
	ProportionLive:   whereHelpernull_Float64{field: "\"vsp_tick_bin\".\"proportion_live\""},
	ProportionMissed: whereHelpernull_Float64{field: "\"vsp_tick_bin\".\"proportion_missed\""},
	UserCount:        whereHelpernull_Int{field: "\"vsp_tick_bin\".\"user_count\""},
	UsersActive:      whereHelpernull_Int{field: "\"vsp_tick_bin\".\"users_active\""},
	Time:             whereHelperint64{field: "\"vsp_tick_bin\".\"time\""},
}

// VSPTickBinRels is where relationship names are stored.
var VSPTickBinRels = struct {
	VSP string
}{
	VSP: "VSP",
}

// vspTickBinR is where relationships are stored.
type vspTickBinR struct {
	VSP *VSP
}

// NewStruct creates a new relationship struct
func (*vspTickBinR) NewStruct() *vspTickBinR {
	return &vspTickBinR{}
}

// vspTickBinL is where Load methods for each relationship are stored.
type vspTickBinL struct{}

var (
	vspTickBinAllColumns            = []string{"vsp_id", "bin", "immature", "live", "voted", "missed", "pool_fees", "proportion_live", "proportion_missed", "user_count", "users_active", "time"}
	vspTickBinColumnsWithoutDefault = []string{"vsp_id", "bin", "immature", "live", "voted", "missed", "pool_fees", "proportion_live", "proportion_missed", "user_count", "users_active", "time"}
	vspTickBinColumnsWithDefault    = []string{}
	vspTickBinPrimaryKeyColumns     = []string{"vsp_id", "time", "bin"}
)

type (
	// VSPTickBinSlice is an alias for a slice of pointers to VSPTickBin.
	// This should generally be used opposed to []VSPTickBin.
	VSPTickBinSlice []*VSPTickBin

	vspTickBinQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vspTickBinType                 = reflect.TypeOf(&VSPTickBin{})
	vspTickBinMapping              = queries.MakeStructMapping(vspTickBinType)
	vspTickBinPrimaryKeyMapping, _ = queries.BindMapping(vspTickBinType, vspTickBinMapping, vspTickBinPrimaryKeyColumns)
	vspTickBinInsertCacheMut       sync.RWMutex
	vspTickBinInsertCache          = make(map[string]insertCache)
	vspTickBinUpdateCacheMut       sync.RWMutex
	vspTickBinUpdateCache          = make(map[string]updateCache)
	vspTickBinUpsertCacheMut       sync.RWMutex
	vspTickBinUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single vspTickBin record from the query.
func (q vspTickBinQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VSPTickBin, error) {
	o := &VSPTickBin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vsp_tick_bin")
	}

	return o, nil
}

// All returns all VSPTickBin records from the query.
func (q vspTickBinQuery) All(ctx context.Context, exec boil.ContextExecutor) (VSPTickBinSlice, error) {
	var o []*VSPTickBin

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VSPTickBin slice")
	}

	return o, nil
}

// Count returns the count of all VSPTickBin records in the query.
func (q vspTickBinQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vsp_tick_bin rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vspTickBinQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vsp_tick_bin exists")
	}

	return count > 0, nil
}

// VSP pointed to by the foreign key.
func (o *VSPTickBin) VSP(mods ...qm.QueryMod) vspQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VSPID),
	}

	queryMods = append(queryMods, mods...)

	query := VSPS(queryMods...)
	queries.SetFrom(query.Query, "\"vsp\"")

	return query
}

// LoadVSP allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vspTickBinL) LoadVSP(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVSPTickBin interface{}, mods queries.Applicator) error {
	var slice []*VSPTickBin
	var object *VSPTickBin

	if singular {
		object = maybeVSPTickBin.(*VSPTickBin)
	} else {
		slice = *maybeVSPTickBin.(*[]*VSPTickBin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vspTickBinR{}
		}
		args = append(args, object.VSPID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vspTickBinR{}
			}

			for _, a := range args {
				if a == obj.VSPID {
					continue Outer
				}
			}

			args = append(args, obj.VSPID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`vsp`), qm.WhereIn(`vsp.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VSP")
	}

	var resultSlice []*VSP
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VSP")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vsp")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vsp")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VSP = foreign
		if foreign.R == nil {
			foreign.R = &vspR{}
		}
		foreign.R.VSPTickBins = append(foreign.R.VSPTickBins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VSPID == foreign.ID {
				local.R.VSP = foreign
				if foreign.R == nil {
					foreign.R = &vspR{}
				}
				foreign.R.VSPTickBins = append(foreign.R.VSPTickBins, local)
				break
			}
		}
	}

	return nil
}

// SetVSP of the vspTickBin to the related item.
// Sets o.R.VSP to related.
// Adds o to related.R.VSPTickBins.
func (o *VSPTickBin) SetVSP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VSP) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vsp_tick_bin\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vsp_id"}),
		strmangle.WhereClause("\"", "\"", 2, vspTickBinPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.VSPID, o.Time, o.Bin}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VSPID = related.ID
	if o.R == nil {
		o.R = &vspTickBinR{
			VSP: related,
		}
	} else {
		o.R.VSP = related
	}

	if related.R == nil {
		related.R = &vspR{
			VSPTickBins: VSPTickBinSlice{o},
		}
	} else {
		related.R.VSPTickBins = append(related.R.VSPTickBins, o)
	}

	return nil
}

// VSPTickBins retrieves all the records using an executor.
func VSPTickBins(mods ...qm.QueryMod) vspTickBinQuery {
	mods = append(mods, qm.From("\"vsp_tick_bin\""))
	return vspTickBinQuery{NewQuery(mods...)}
}

// FindVSPTickBin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVSPTickBin(ctx context.Context, exec boil.ContextExecutor, vSPID int, time int64, bin string, selectCols ...string) (*VSPTickBin, error) {
	vspTickBinObj := &VSPTickBin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vsp_tick_bin\" where \"vsp_id\"=$1 AND \"time\"=$2 AND \"bin\"=$3", sel,
	)

	q := queries.Raw(query, vSPID, time, bin)

	err := q.Bind(ctx, exec, vspTickBinObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vsp_tick_bin")
	}

	return vspTickBinObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VSPTickBin) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vsp_tick_bin provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(vspTickBinColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vspTickBinInsertCacheMut.RLock()
	cache, cached := vspTickBinInsertCache[key]
	vspTickBinInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vspTickBinAllColumns,
			vspTickBinColumnsWithDefault,
			vspTickBinColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vspTickBinType, vspTickBinMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vspTickBinType, vspTickBinMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vsp_tick_bin\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vsp_tick_bin\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vsp_tick_bin")
	}

	if !cached {
		vspTickBinInsertCacheMut.Lock()
		vspTickBinInsertCache[key] = cache
		vspTickBinInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the VSPTickBin.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VSPTickBin) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	vspTickBinUpdateCacheMut.RLock()
	cache, cached := vspTickBinUpdateCache[key]
	vspTickBinUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vspTickBinAllColumns,
			vspTickBinPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vsp_tick_bin, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vsp_tick_bin\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vspTickBinPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vspTickBinType, vspTickBinMapping, append(wl, vspTickBinPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vsp_tick_bin row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vsp_tick_bin")
	}

	if !cached {
		vspTickBinUpdateCacheMut.Lock()
		vspTickBinUpdateCache[key] = cache
		vspTickBinUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q vspTickBinQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vsp_tick_bin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vsp_tick_bin")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VSPTickBinSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vspTickBinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vsp_tick_bin\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vspTickBinPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vspTickBin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vspTickBin")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VSPTickBin) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vsp_tick_bin provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(vspTickBinColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vspTickBinUpsertCacheMut.RLock()
	cache, cached := vspTickBinUpsertCache[key]
	vspTickBinUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			vspTickBinAllColumns,
			vspTickBinColumnsWithDefault,
			vspTickBinColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			vspTickBinAllColumns,
			vspTickBinPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vsp_tick_bin, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(vspTickBinPrimaryKeyColumns))
			copy(conflict, vspTickBinPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vsp_tick_bin\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(vspTickBinType, vspTickBinMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vspTickBinType, vspTickBinMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vsp_tick_bin")
	}

	if !cached {
		vspTickBinUpsertCacheMut.Lock()
		vspTickBinUpsertCache[key] = cache
		vspTickBinUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single VSPTickBin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VSPTickBin) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VSPTickBin provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vspTickBinPrimaryKeyMapping)
	sql := "DELETE FROM \"vsp_tick_bin\" WHERE \"vsp_id\"=$1 AND \"time\"=$2 AND \"bin\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vsp_tick_bin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vsp_tick_bin")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vspTickBinQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vspTickBinQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vsp_tick_bin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vsp_tick_bin")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VSPTickBinSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vspTickBinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vsp_tick_bin\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vspTickBinPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vspTickBin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vsp_tick_bin")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VSPTickBin) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVSPTickBin(ctx, exec, o.VSPID, o.Time, o.Bin)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VSPTickBinSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VSPTickBinSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vspTickBinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vsp_tick_bin\".* FROM \"vsp_tick_bin\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vspTickBinPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VSPTickBinSlice")
	}

	*o = slice

	return nil
}

// VSPTickBinExists checks if the VSPTickBin row exists.
func VSPTickBinExists(ctx context.Context, exec boil.ContextExecutor, vSPID int, time int64, bin string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vsp_tick_bin\" where \"vsp_id\"=$1 AND \"time\"=$2 AND \"bin\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vSPID, time, bin)
	}
	row := exec.QueryRowContext(ctx, sql, vSPID, time, bin)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vsp_tick_bin exists")
	}

	return exists, nil
}
